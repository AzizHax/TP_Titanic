#lecture du tableau des Vi de la laccase en fonction de [S]
#le fichier laccase.txt doit etre mis dans le répertoire Documents
laccase <- read.delim("~/laccase.txt", comment.char="#")
#ajustement des paramètres de l'équation de Michaelis & Menten aux données expérimentales avec la méthode des moindres carrés
fit_mm <- nls(v~S*Vmax/(S+Km),laccase,list(Km=10,Vmax=0.06))
# creation d'un tableau avec les valeurs moyennes et les ecarts-types
lacavg <- do.call(data.frame, aggregate(. ~ S, laccase, function(x) c(mean = mean(x), sd = sd(x))))
#dessin du graphique avec les valeurs moyennes
plot(lacavg$S, lacavg$v.mean,
xlab=expression(paste("Concentration initiale en substrat (",mu,"M)")),
ylab=expression(paste("Vitesse initiale de la réaction ( ",mu, "M/s)")),
main="Représentation de Michaelis & Menten",
pch=19, bty="l", xlim=c(0,max(lacavg$S)), ylim=c(0,max(lacavg$v.mean)))
x <- seq(from = 0, to = max(lacavg$S), length = 250)
#représentation des écarts types
arrows(lacavg$S, lacavg$v.mean-lacavg$v.sd, lacavg$S, lacavg$v.mean+lacavg$v.sd, code = 3, length = 0.05, angle = 90)
#ajout de la droite de regression Michaelis & Menten (ligne continue)
lines(x, predict(fit_mm, list(S = x)))
#ajout de la légende de la figure en bas à droite
legend("bottomright", title = "Légende", c("modèlisation"), lty=c(1))
#inversion des paramètres pour la représentation en double inverse
x <- 1/lacavg$S
y <- 1/lacavg$v.mean
#dessin de la représentation en double inverse
plot (x, y, pch = 19, bty="l",
xlab=expression("1/[ABTS]" ~ (mu * M^{-1})),
ylab=expression("1/Vi" ~ (s ~ mu * M^{-1})),
main="Transformation de Lineweaver & Burk")
#régression linéaire
lb <- lm (y~x)
#dessin de la droite de régression sur le graphique
abline(lb$coefficients)
lb$coefficients
#ajout de la légende de la figure en bas à droite
legend("bottomright", title = "Légende", c("modèlisation"), lty=c(1))
#calcul de Vmax et Km d'après les paramètres de la droite
Vmax_lb <- 1/lb$coefficients[1]
Km_lb <- Vmax_lb*lb$coefficients[2]
#calcul des limites de confiance des paramètres
conf_lb <- confint(lb)
Vmax_conf <- 1/conf_lb[1,]
Km_conf <- c(min(Vmax_conf)*min(conf_lb[2,]),max(Vmax_conf)*max(conf_lb[2,]))
#ajout des paramètres de léquation sur le graphique
legend("topleft", inset =0.01,
paste("1/Vmax =", round(lb$coef[2],2),"* 1/[S] +", round(lb$coef[1],2)), lwd = 1)
print("Détermination des paramètres cinétiques par la méthode des moindres carrés")
#résumé de l'ajustement de léquation de Michaelis & Menten
summary(fit_mm)
print("Détermination des paramètres cinétiques par régression linéaire d'après la représentation en double inverse")
#Valeur de Vmax
Vmax_lb
#Intervale de confiance de Vmax
Vmax_conf
#Valeur de Km
Km_lb
#Intervale de confiance de Km
Km_conf
#lecture du tableau des Vi de la laccase en fonction de [S]
#le fichier laccase.txt doit etre mis dans le répertoire Documents
laccase <- read.delim("~/laccase.txt", comment.char="#")
#ajustement des paramètres de l'équation de Michaelis & Menten aux données expérimentales avec la méthode des moindres carrés
fit_mm <- nls(v~S*Vmax/(S+Km),laccase,list(Km=10,Vmax=0.06))
# creation d'un tableau avec les valeurs moyennes et les ecarts-types
lacavg <- do.call(data.frame, aggregate(. ~ S, laccase, function(x) c(mean = mean(x), sd = sd(x))))
#dessin du graphique avec les valeurs moyennes
plot(lacavg$S, lacavg$v.mean,
xlab=expression(paste("Concentration initiale en substrat (",mu,"M)")),
ylab=expression(paste("Vitesse initiale de la réaction ( ",mu, "M/s)")),
main="Représentation de Michaelis & Menten",
pch=19, bty="l", xlim=c(0,max(lacavg$S)), ylim=c(0,max(lacavg$v.mean)))
x <- seq(from = 0, to = max(lacavg$S), length = 250)
#représentation des écarts types
arrows(lacavg$S, lacavg$v.mean-lacavg$v.sd, lacavg$S, lacavg$v.mean+lacavg$v.sd, code = 3, length = 0.05, angle = 90)
#ajout de la droite de regression Michaelis & Menten (ligne continue)
lines(x, predict(fit_mm, list(S = x)))
#ajout de la légende de la figure en bas à droite
legend("bottomright", title = "Légende", c("modèlisation"), lty=c(1))
#inversion des paramètres pour la représentation en double inverse
x <- 1/lacavg$S
y <- 1/lacavg$v.mean
#dessin de la représentation en double inverse
plot (x, y, pch = 19, bty="l",
xlab=expression("1/[ABTS]" ~ (mu * M^{-1})),
ylab=expression("1/Vi" ~ (s ~ mu * M^{-1})),
main="Transformation de Lineweaver & Burk")
#régression linéaire
lb <- lm (y~x)
#dessin de la droite de régression sur le graphique
abline(lb$coefficients)
lb$coefficients
#ajout de la légende de la figure en bas à droite
legend("bottomright", title = "Légende", c("modèlisation"), lty=c(1))
#calcul de Vmax et Km d'après les paramètres de la droite
Vmax_lb <- 1/lb$coefficients[1]
Km_lb <- Vmax_lb*lb$coefficients[2]
#calcul des limites de confiance des paramètres
conf_lb <- confint(lb)
Vmax_conf <- 1/conf_lb[1,]
Km_conf <- c(min(Vmax_conf)*min(conf_lb[2,]),max(Vmax_conf)*max(conf_lb[2,]))
#ajout des paramètres de léquation sur le graphique
legend("topleft", inset =0.01,
paste("1/Vmax =", round(lb$coef[2],2),"* 1/[S] +", round(lb$coef[1],2)), lwd = 1)
print("Détermination des paramètres cinétiques par la méthode des moindres carrés")
#résumé de l'ajustement de léquation de Michaelis & Menten
summary(fit_mm)
print("Détermination des paramètres cinétiques par régression linéaire d'après la représentation en double inverse")
#Valeur de Vmax
Vmax_lb
#Intervale de confiance de Vmax
Vmax_conf
#Valeur de Km
Km_lb
#Intervale de confiance de Km
Km_conf
#Intervale de confiance de Km
Km_conf
#lecture du tableau des Vi de la laccase en fonction de [S]
#le fichier laccase.txt doit etre mis dans le répertoire Documents
laccase <- read.delim("~/laccase.txt", comment.char="#")
#ajustement des paramètres de l'équation de Michaelis & Menten aux données expérimentales avec la méthode des moindres carrés
fit_mm <- nls(v~S*Vmax/(S+Km),laccase,list(Km=10,Vmax=0.06))
data()
data(nile)
data(niles)
data()
data(women)
top_secret <- read.csv("https://juliescholler.gitlab.io/publication/l2r1-2122/message_code.csv",
header = FALSE)$V1
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
AGE=c(34.5, 23, 18, 42.5, 75 7)
AGE=c(34.5, 23, 18, 42.5, 75, 7)
Age
AGE
temps=c(1, 0.5)
x=AGE*temps ; y=AGE+temps
x
y
x2=temps*AGE ; x2
AGE[AGE>20]
AGE[c(3, 5, 6)
]
AGE[-c(3, 5, 6)]
names(AGE)=c("Fred", "Paul", "Marie", "Jo", "Yves", "Jack")
AGE; AGE[c("Paul", "Marie")]
list(ages=AGE, ageplus=y, agenoms=c("Paul", "Marie"))
liste[[2]]
list[[2]]
liste=list(ages=AGE, ageplus=y, agenoms=c("Paul", "Marie"))
liste[[2]]
liste$agesplus
liste$ageplus
liste[[2][1]]
liste[[2]][1]
x=1:6
y=10
z=c(20,30)
w=1:4
date.frame(x,y)
data.frame(x,y)
data.frame(x,z)
data.frame(x,w)
matrix(1:6, 2, 3)
matrix(1:6, 2, 3, byrow=TRUE)
x=1:6 ; dim(x)=c(2,3) ; x
HAUTEUR <- c(185, 170, 172, 180, 168, 175)
plot(x=AGE, y=HAUTEUR, type=’’p’’)
plot(x=AGE, y=HAUTEUR, type="p")
> plot(x=AGE, y=HAUTEUR, type="l")
plot(x=AGE, y=HAUTEUR, type="l")
plot(AGE, HAUTEUR, type="p")
x=3
carré=function(x){x=x*x;return(x)}
carré(x)
x
help(read)
help(read.csv)
save.image("C:\\Users\\Admin\\Documents\\formation_python\\session R Maths Toulouse")
help(read.csv)
Ravitaillement=read.csv(file, header = TRUE, sep = ",", quote = "\"",
read.csv(file, header = TRUE, sep = ",", quote = "\"",
x
sqdlqsld
Ravitallement=read.csv(file, header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", ...)
Ravitallement=read.csv("ravitallement.csv",header = TRUE, sep = ",", quote = "\"",
+          dec = ".", fill = TRUE, comment.char = "", ...)
Ravitallement=read.csv("ravitallement.csv",header = TRUE)
Ravitallement=read.csv("ravitaillement.csv",header = TRUE)
Ravitallement=read.csv("ravitaillement.csv")
factor(c(1, 22, 1, 1, 2, 2))
s <- factor(c("m", "f", "f", "m", "m", NA, "f", "f"))
s
as.factor(c(1, 22, 1, 1, 2, 2))
c
e=factor(c("bleu", "marron", "vert", "marron", "marron", "bleu", "marron", "marron", "vert", "vert", "marron", "vert")
)
couleurs=factor(c("bleu", "marron", "vert", "marron", "marron", "bleu", "marron", "marron", "vert", "vert", "marron", "vert"))
levels(couleurs)
table(couleurs)
prop.table(table(couleurs))
nlevels(couleurs)
a=cos(75)
a
b=cos(25)
b
c=cos(90)
c
d="Un bon bioinformaticien ne peut pas travailler sans connaître le langage R"
print(d)
length(d)
count(d)
help(wordcount)
?wordcount
nchar(d)
e=4850/26
e
options(digits=3)
e
options(digts=6)
e
z=186.5385
options(digts=6)
z
round(z,digits=6)
pi
str_to_upper(d)
str_to_upper(string, locale = "en")
library(dplyr)
result <- 4850 / 26
rounded_result <- round(result, digits = 3)
print(rounded_result)
result <- 4850 / 26
formatted_result <- format(result, nsmall = 3)
print(formatted_result)
result <- 4850 / 26
formattedC_result <- formatC(result, format = "f", digits = 3)
print(formattedC_result)
bmaj=toupper(b)
bmaj
emaj=toupper(e)
e
dmaj=toupper(d)
dmaj
pi
formatted_pi=format(result, nsmall = 3)
pi
formatted_pi=format(result, nsmall = 4)
formated_pi
formatted_pi
formatted_pi=format(result, nsmall = 5)
formatted_pi
pi12=pi+12
9=pi12
pi12=9
pi12
pi12=pi+12
pi12=pi+12 ; pi12=9 ; pi12
pi12=pi+12
pi12
pi=9
print(pi)
print(pi12)
n=5
factoriller=1
n <- 5  # Vous pouvez changer cette valeur pour tester avec d'autres nombres
factorielle <- 1
i <- 1
while (i <= n) {
factorielle <- factorielle * i
i <- i + 1
}
print(factorielle)
calculer_factorielle <- function(n) {
factorielle <- 1
i <- 1
while (i <= n) {
factorielle <- factorielle * i
i <- i + 1
}
return(factorielle)
}
resultat <- calculer_factorielle(5)
print(resultat)  # Affiche la factorielle de 5
# Boucle for pour parcourir les entiers de 1 à 20
for (i in 1:20) {
if (i %% 2 == 0) {
print(paste(i, "est pair"))
}
}
save.image("C:\\Users\\Admin\\Documents\\formation_python\\TP master data science")
# Initialisation des deux premiers termes
fibonacci <- numeric(10)
fibonacci[1] <- 0
fibonacci[2] <- 1
# Calcul des termes suivants
for (i in 3:10) {
fibonacci[i] <- fibonacci[i-1] + fibonacci[i-2]
}
# Affichage des termes
print(fibonacci)
q()
print("hello my sunshine")
x <- 5
x
library(usethis)
library(dplyr)
library(devtools)
calculate_survival_rate_by_class <- function(data) {
# Convertir "yes" en 1 et "no" en 0 dans la colonne survived
data <- data %>%
mutate(survived = ifelse(survived == "yes", 1, ifelse(survived == "no", 0, NA)))
# Calculer le taux de survie par classe
data %>%
group_by(passengerClass) %>%
summarize(
total = n(),
survived = sum(survived, na.rm = TRUE),
survival_rate = round((survived / total) * 100, 2)
)
}
calculate_survival_rate_by_sex <- function(data) {
# Convertir "yes" en 1 et "no" en 0 dans la colonne survived, gérer les autres valeurs inattendues
data <- data %>%
mutate(survived = case_when(
survived == "yes" ~ 1,
survived == "no" ~ 0,
TRUE ~ NA_real_  # Remplacer toutes les autres valeurs par NA
))
# Calculer le taux de survie par sexe
data %>%
group_by(sex) %>%
summarize(
total = n(),
survived = sum(survived, na.rm = TRUE),
survival_rate = round((survived / total) * 100, 2)
) %>%
arrange(desc(survival_rate))
}
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
library(carData)
library(dplyr)
library(ggplot2)
library(knitr)
library(TitanicPackage)
library(dplyr)
library(carData)
data("TitanicSurvival")
taux_survie_classe <- calculate_survival_rate_by_class(TitanicSurvival)
print(taux_survie_classe)
taux_survie_sexe <- calculate_survival_rate_by_sex(TitanicSurvival)
print(taux_survie_sexe)
library(usethis)
library(dplyr)
library(devtools)
calculate_survival_rate_by_class <- function(data) {
# Convertir "yes" en 1 et "no" en 0 dans la colonne survived
data <- data %>%
mutate(survived = ifelse(survived == "yes", 1, ifelse(survived == "no", 0, NA)))
# Calculer le taux de survie par classe
data %>%
group_by(passengerClass) %>%
summarize(
total = n(),
survived = sum(survived, na.rm = TRUE),
survival_rate = round((survived / total) * 100, 2)
)
}
calculate_survival_rate_by_sex <- function(data) {
# Convertir "yes" en 1 et "no" en 0 dans la colonne survived, gérer les autres valeurs inattendues
data <- data %>%
mutate(survived = case_when(
survived == "yes" ~ 1,
survived == "no" ~ 0,
TRUE ~ NA_real_  # Remplacer toutes les autres valeurs par NA
))
# Calculer le taux de survie par sexe
data %>%
group_by(sex) %>%
summarize(
total = n(),
survived = sum(survived, na.rm = TRUE),
survival_rate = round((survived / total) * 100, 2)
) %>%
arrange(desc(survival_rate))
}
devtools::document()
devtools::document()
setwd("C:/Users/Admin/Desktop/M1 IDS/TDS/TP_Titanic/TitanicPackage")
devtools::document()
devtools::install()
setwd("C:/Users/Admin/Desktop/M1 IDS/TDS/TP_Titanic/TitanicPackage")
knitr::opts_chunk$set(echo = TRUE)
library(carData)
library(dplyr)
library(ggplot2)
library(knitr)
library(TitanicPackage)
library(dplyr)
library(carData)
data("TitanicSurvival")
taux_survie_classe <- calculate_survival_rate_by_class(TitanicSurvival)
print(taux_survie_classe)
taux_survie_sexe <- calculate_survival_rate_by_sex(TitanicSurvival)
print(taux_survie_sexe)
knitr::opts_chunk$set(echo = TRUE)
library(carData)
library(dplyr)
library(ggplot2)
library(knitr)
library(TitanicPackage)
library(dplyr)
library(carData)
data("TitanicSurvival")
taux_survie_classe <- calculate_survival_rate_by_class(TitanicSurvival)
print(taux_survie_classe)
taux_survie_sexe <- calculate_survival_rate_by_sex(TitanicSurvival)
print(taux_survie_sexe)
devtools::document(())
devtools::document(TitanicPackage)
devtools::document("TitanicPackage")
setwd("C:/Users/Admin/Desktop/M1 IDS/TDS/TP_Titanic")
devtools::document("TitanicPackage")
devtools::build("TitanicPackage")
devtools::install()
devtool::install("TitanicPackage")
devtools::install("TitanicPackage")
library(TitanicPackage)
TitanicPackage::calculate_survival_rate_by_class(TitanicSurvival)
TitanicPackage::calculate_survival_rate_by_sex(TitanicSurvival)
devtools::document("TitanicPackage")
devtools::document("TitanicPackage")
library(TitanicPackage)
detach("package:TitanicPackage", unload = TRUE)
devtools::document("TitanicPackage")
setwd("C:/Users/Admin/Desktop/M1 IDS/TDS/TP_Titanic/TitanicPackage/R")
setwd("C:/Users/Admin/Desktop/M1 IDS/TDS/TP_Titanic")
devtools::document("TitanicPackage")
devtools::build("TitanicPackage")
devtools::install("TitanicPackage")
library(TitanicPackage)
library(carData)
data("TitanicSurvival")
force(TitanicSurvival)
calculate_survival_rate_by_sex(TitanicSurvival)
